# ============================================================================
# Deptrac configuration for Symfony DDD demo
#
# Purpose:
#   - Enforce strict architectural boundaries between layers and bounded contexts.
#   - Protect pure Domain layers from any framework, persistence, or integration leakage.
#   - Document allowed dependencies explicitly.
#
# Notes:
#   - Rule summary:
#       * Presentation → Application only
#       * Application → Domain (+ Shared, own Contracts)
#       * Domain → SharedDomain only
#       * Infrastructure → Domain/Application/Shared/Doctrine/Framework
#       * Integration → Application + Contracts of other BCs
#       * SharedDomain must remain dependency-free
# ============================================================================

deptrac:
    paths:
        - ./src
    exclude_files:
        - '#/Tests/#'

    layers:
        # ---- Shared Kernel (cross-cutting primitives and domain-safe services)

        -   name: SharedDomain
            collectors:
                -   type: classNameRegex
                    value: '#^App\\SharedKernel\\Domain\\#'
            # Contains primitives, value objects, cross-cutting domain services.
            # Must remain dependency-free (no Symfony, Doctrine, or infrastructure).

        -   name: SharedInfrastructure
            collectors:
                -   type: classNameRegex
                    value: '#^App\\SharedKernel\\Infrastructure\\#'
            # Technical services shared between BCs (persistence plumbing, logging, DI, etc.).
            # Depends on SharedDomain, Doctrine, and Framework.

        -   name: SharedKernelHttp
            collectors: [ { type: classNameRegex, value: '#^App\\SharedKernel\\Http\\#' } ]
        # ---- Order Bounded Context

        -   name: OrderDomain
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Order\\Domain\\#'
            # Pure domain model for Order BC.
            # No external dependencies allowed except SharedDomain.

        -   name: OrderApplication
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Order\\Application\\#'
            # Use cases, commands, handlers, and ports.
            # Orchestrates domain logic and calls out to infrastructure through ports.

        -   name: OrderInfrastructure
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Order\\Infrastructure\\#'
            # Technical details: Doctrine mappings, persistence adapters,
            # messaging implementations, Symfony integration, etc.
            # May depend on Domain, Shared, Doctrine, and Framework.

        -   name: OrderPresentation
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Order\\Presentation\\#'
            # Entry points only (HTTP controllers, CLI, GraphQL).
            # Must delegate immediately to Application layer.

        -   name: OrderIntegration
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Order\\Integration\\#'
            # Anti-corruption layer for communication with other bounded contexts.
            # Allowed to depend only on own Application and foreign *Contracts*.

        # ---- Catalogue Bounded Context

        -   name: CatalogueDomain
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Catalogue\\Domain\\#'
            # Pure domain model for Catalogue BC.
            # Depends only on SharedDomain.

        -   name: CatalogueApplication
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Catalogue\\Application\\#'
            # Use cases, commands, handlers, ports.
            # Allowed to see CatalogueDomain, SharedDomain, and its own Contracts (OHS).

        -   name: CatalogueInfrastructure
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Catalogue\\Infrastructure\\#'
            # Technical details for Catalogue (Doctrine persistence, Symfony services, etc.).
            # May depend on Domain, Application, Shared, Doctrine, Framework, and Contracts.

        -   name: CataloguePresentation
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Catalogue\\Presentation\\#'
            # Entry points (controllers, CLI, etc.).
            # Must delegate to Application only.

        -   name: CatalogueContracts
            collectors:
                -   type: classNameRegex
                    value: '#^App\\Catalogue\\Contracts\\#'
            # Published Language of the Catalogue BC.
            # Other BCs integrate through these DTOs / interfaces, not internals.

        # ---- Third-party layers

        -   name: Doctrine
            collectors:
                -   type: classNameRegex
                    value: '#^Doctrine\\#'
            # Doctrine ORM and DBAL classes. Allowed only in Infrastructure.

        -   name: Framework
            collectors:
                -   type: classNameRegex
                    value: '#^Symfony\\#'
            # Symfony framework classes. Allowed only in Infrastructure and Presentation.

    ruleset:
        # Shared Kernel
        SharedDomain: [ ]   # Must stay dependency-free
        SharedInfrastructure:
            - SharedDomain
            - SharedKernelHttp
            - Doctrine        # Persistence/runtime plumbing
            - Framework       # Technical details (logging, DI, etc.)
        SharedKernelHttp: [ ]
        # Order BC
        OrderDomain: [ SharedDomain ]
        OrderApplication:
            - OrderDomain
            - SharedDomain
        OrderInfrastructure:
            - OrderDomain
            - OrderApplication
            - SharedDomain
            - Doctrine
            - SharedInfrastructure
            - Framework
        OrderPresentation:
            - OrderApplication
            - SharedKernelHttp
            - Framework
        OrderIntegration:
            - OrderApplication
            - CatalogueContracts   # ACL depends only on published language of other BC

        # Catalogue BC
        CatalogueDomain: [ SharedDomain ]
        CatalogueApplication:
            - CatalogueDomain
            - SharedDomain
            - CatalogueContracts   # Application may see its own Contracts (OHS)
        CatalogueInfrastructure:
            - CatalogueDomain
            - CatalogueApplication
            - SharedDomain
            - Doctrine
            - SharedInfrastructure
            - CatalogueContracts
            - Framework
        CataloguePresentation:
            - CatalogueApplication
            - SharedKernelHttp
            - Framework

        CatalogueContracts: [ ]

    analyser:
        types: [ class, use, function_call ]

